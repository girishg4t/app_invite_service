// Code generated by counterfeiter. DO NOT EDIT.
package repofakes

import (
	"sync"

	"github.com/girishg4t/app_invite_service/pkg/model"
	"github.com/girishg4t/app_invite_service/pkg/repo"
)

type FakeIAppToken struct {
	GetAllAppTokenStub        func() ([]model.AppToken, error)
	getAllAppTokenMutex       sync.RWMutex
	getAllAppTokenArgsForCall []struct {
	}
	getAllAppTokenReturns struct {
		result1 []model.AppToken
		result2 error
	}
	getAllAppTokenReturnsOnCall map[int]struct {
		result1 []model.AppToken
		result2 error
	}
	GetAppTokenStub        func(*model.AppToken) (model.AppToken, error)
	getAppTokenMutex       sync.RWMutex
	getAppTokenArgsForCall []struct {
		arg1 *model.AppToken
	}
	getAppTokenReturns struct {
		result1 model.AppToken
		result2 error
	}
	getAppTokenReturnsOnCall map[int]struct {
		result1 model.AppToken
		result2 error
	}
	SaveAppTokenStub        func(*model.AppToken) error
	saveAppTokenMutex       sync.RWMutex
	saveAppTokenArgsForCall []struct {
		arg1 *model.AppToken
	}
	saveAppTokenReturns struct {
		result1 error
	}
	saveAppTokenReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateAppTokenStub        func(*model.AppToken) (*model.AppToken, error)
	updateAppTokenMutex       sync.RWMutex
	updateAppTokenArgsForCall []struct {
		arg1 *model.AppToken
	}
	updateAppTokenReturns struct {
		result1 *model.AppToken
		result2 error
	}
	updateAppTokenReturnsOnCall map[int]struct {
		result1 *model.AppToken
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIAppToken) GetAllAppToken() ([]model.AppToken, error) {
	fake.getAllAppTokenMutex.Lock()
	ret, specificReturn := fake.getAllAppTokenReturnsOnCall[len(fake.getAllAppTokenArgsForCall)]
	fake.getAllAppTokenArgsForCall = append(fake.getAllAppTokenArgsForCall, struct {
	}{})
	stub := fake.GetAllAppTokenStub
	fakeReturns := fake.getAllAppTokenReturns
	fake.recordInvocation("GetAllAppToken", []interface{}{})
	fake.getAllAppTokenMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAppToken) GetAllAppTokenCallCount() int {
	fake.getAllAppTokenMutex.RLock()
	defer fake.getAllAppTokenMutex.RUnlock()
	return len(fake.getAllAppTokenArgsForCall)
}

func (fake *FakeIAppToken) GetAllAppTokenCalls(stub func() ([]model.AppToken, error)) {
	fake.getAllAppTokenMutex.Lock()
	defer fake.getAllAppTokenMutex.Unlock()
	fake.GetAllAppTokenStub = stub
}

func (fake *FakeIAppToken) GetAllAppTokenReturns(result1 []model.AppToken, result2 error) {
	fake.getAllAppTokenMutex.Lock()
	defer fake.getAllAppTokenMutex.Unlock()
	fake.GetAllAppTokenStub = nil
	fake.getAllAppTokenReturns = struct {
		result1 []model.AppToken
		result2 error
	}{result1, result2}
}

func (fake *FakeIAppToken) GetAllAppTokenReturnsOnCall(i int, result1 []model.AppToken, result2 error) {
	fake.getAllAppTokenMutex.Lock()
	defer fake.getAllAppTokenMutex.Unlock()
	fake.GetAllAppTokenStub = nil
	if fake.getAllAppTokenReturnsOnCall == nil {
		fake.getAllAppTokenReturnsOnCall = make(map[int]struct {
			result1 []model.AppToken
			result2 error
		})
	}
	fake.getAllAppTokenReturnsOnCall[i] = struct {
		result1 []model.AppToken
		result2 error
	}{result1, result2}
}

func (fake *FakeIAppToken) GetAppToken(arg1 *model.AppToken) (model.AppToken, error) {
	fake.getAppTokenMutex.Lock()
	ret, specificReturn := fake.getAppTokenReturnsOnCall[len(fake.getAppTokenArgsForCall)]
	fake.getAppTokenArgsForCall = append(fake.getAppTokenArgsForCall, struct {
		arg1 *model.AppToken
	}{arg1})
	stub := fake.GetAppTokenStub
	fakeReturns := fake.getAppTokenReturns
	fake.recordInvocation("GetAppToken", []interface{}{arg1})
	fake.getAppTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAppToken) GetAppTokenCallCount() int {
	fake.getAppTokenMutex.RLock()
	defer fake.getAppTokenMutex.RUnlock()
	return len(fake.getAppTokenArgsForCall)
}

func (fake *FakeIAppToken) GetAppTokenCalls(stub func(*model.AppToken) (model.AppToken, error)) {
	fake.getAppTokenMutex.Lock()
	defer fake.getAppTokenMutex.Unlock()
	fake.GetAppTokenStub = stub
}

func (fake *FakeIAppToken) GetAppTokenArgsForCall(i int) *model.AppToken {
	fake.getAppTokenMutex.RLock()
	defer fake.getAppTokenMutex.RUnlock()
	argsForCall := fake.getAppTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAppToken) GetAppTokenReturns(result1 model.AppToken, result2 error) {
	fake.getAppTokenMutex.Lock()
	defer fake.getAppTokenMutex.Unlock()
	fake.GetAppTokenStub = nil
	fake.getAppTokenReturns = struct {
		result1 model.AppToken
		result2 error
	}{result1, result2}
}

func (fake *FakeIAppToken) GetAppTokenReturnsOnCall(i int, result1 model.AppToken, result2 error) {
	fake.getAppTokenMutex.Lock()
	defer fake.getAppTokenMutex.Unlock()
	fake.GetAppTokenStub = nil
	if fake.getAppTokenReturnsOnCall == nil {
		fake.getAppTokenReturnsOnCall = make(map[int]struct {
			result1 model.AppToken
			result2 error
		})
	}
	fake.getAppTokenReturnsOnCall[i] = struct {
		result1 model.AppToken
		result2 error
	}{result1, result2}
}

func (fake *FakeIAppToken) SaveAppToken(arg1 *model.AppToken) error {
	fake.saveAppTokenMutex.Lock()
	ret, specificReturn := fake.saveAppTokenReturnsOnCall[len(fake.saveAppTokenArgsForCall)]
	fake.saveAppTokenArgsForCall = append(fake.saveAppTokenArgsForCall, struct {
		arg1 *model.AppToken
	}{arg1})
	stub := fake.SaveAppTokenStub
	fakeReturns := fake.saveAppTokenReturns
	fake.recordInvocation("SaveAppToken", []interface{}{arg1})
	fake.saveAppTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIAppToken) SaveAppTokenCallCount() int {
	fake.saveAppTokenMutex.RLock()
	defer fake.saveAppTokenMutex.RUnlock()
	return len(fake.saveAppTokenArgsForCall)
}

func (fake *FakeIAppToken) SaveAppTokenCalls(stub func(*model.AppToken) error) {
	fake.saveAppTokenMutex.Lock()
	defer fake.saveAppTokenMutex.Unlock()
	fake.SaveAppTokenStub = stub
}

func (fake *FakeIAppToken) SaveAppTokenArgsForCall(i int) *model.AppToken {
	fake.saveAppTokenMutex.RLock()
	defer fake.saveAppTokenMutex.RUnlock()
	argsForCall := fake.saveAppTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAppToken) SaveAppTokenReturns(result1 error) {
	fake.saveAppTokenMutex.Lock()
	defer fake.saveAppTokenMutex.Unlock()
	fake.SaveAppTokenStub = nil
	fake.saveAppTokenReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAppToken) SaveAppTokenReturnsOnCall(i int, result1 error) {
	fake.saveAppTokenMutex.Lock()
	defer fake.saveAppTokenMutex.Unlock()
	fake.SaveAppTokenStub = nil
	if fake.saveAppTokenReturnsOnCall == nil {
		fake.saveAppTokenReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveAppTokenReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAppToken) UpdateAppToken(arg1 *model.AppToken) (*model.AppToken, error) {
	fake.updateAppTokenMutex.Lock()
	ret, specificReturn := fake.updateAppTokenReturnsOnCall[len(fake.updateAppTokenArgsForCall)]
	fake.updateAppTokenArgsForCall = append(fake.updateAppTokenArgsForCall, struct {
		arg1 *model.AppToken
	}{arg1})
	stub := fake.UpdateAppTokenStub
	fakeReturns := fake.updateAppTokenReturns
	fake.recordInvocation("UpdateAppToken", []interface{}{arg1})
	fake.updateAppTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAppToken) UpdateAppTokenCallCount() int {
	fake.updateAppTokenMutex.RLock()
	defer fake.updateAppTokenMutex.RUnlock()
	return len(fake.updateAppTokenArgsForCall)
}

func (fake *FakeIAppToken) UpdateAppTokenCalls(stub func(*model.AppToken) (*model.AppToken, error)) {
	fake.updateAppTokenMutex.Lock()
	defer fake.updateAppTokenMutex.Unlock()
	fake.UpdateAppTokenStub = stub
}

func (fake *FakeIAppToken) UpdateAppTokenArgsForCall(i int) *model.AppToken {
	fake.updateAppTokenMutex.RLock()
	defer fake.updateAppTokenMutex.RUnlock()
	argsForCall := fake.updateAppTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAppToken) UpdateAppTokenReturns(result1 *model.AppToken, result2 error) {
	fake.updateAppTokenMutex.Lock()
	defer fake.updateAppTokenMutex.Unlock()
	fake.UpdateAppTokenStub = nil
	fake.updateAppTokenReturns = struct {
		result1 *model.AppToken
		result2 error
	}{result1, result2}
}

func (fake *FakeIAppToken) UpdateAppTokenReturnsOnCall(i int, result1 *model.AppToken, result2 error) {
	fake.updateAppTokenMutex.Lock()
	defer fake.updateAppTokenMutex.Unlock()
	fake.UpdateAppTokenStub = nil
	if fake.updateAppTokenReturnsOnCall == nil {
		fake.updateAppTokenReturnsOnCall = make(map[int]struct {
			result1 *model.AppToken
			result2 error
		})
	}
	fake.updateAppTokenReturnsOnCall[i] = struct {
		result1 *model.AppToken
		result2 error
	}{result1, result2}
}

func (fake *FakeIAppToken) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAllAppTokenMutex.RLock()
	defer fake.getAllAppTokenMutex.RUnlock()
	fake.getAppTokenMutex.RLock()
	defer fake.getAppTokenMutex.RUnlock()
	fake.saveAppTokenMutex.RLock()
	defer fake.saveAppTokenMutex.RUnlock()
	fake.updateAppTokenMutex.RLock()
	defer fake.updateAppTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIAppToken) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repo.IAppToken = new(FakeIAppToken)
